{ Duplex } = require 'stream'
{ createServer } = require 'http'
{ readFileSync, existsSync, statSync } = require 'fs'

path = require 'path'

file = require './file'
route = require './router'
args = require '../args'
cwmp = require './cwmp'

module.exports = (ip, port, url) ->

  if args.sts
    try
      file.sts = readFileSync args.sts
    catch e
      throw e

  file.sts = Buffer.from file.sts
    .toString 'utf8'
    .replace '{{url}}', url
  , 'utf8'

  route
    .get '/file.sts', (req, res) ->
      console.log '>>> STS REQUEST'

      headers =
        'Content-Type': 'text/plain'
        'Content-Length': file.sts.length

      console.log '>>> STS RESPONSE'
      console.dir [headers, file.sts.toString('utf8')]

      res.writeHead 200, headers

      stream = new Duplex()
      stream.push file.sts
      stream.push null
      stream.pipe res
    .get '/done', (req, res) ->
      console.log '>>> WPS CALLBACK'
      console.log """\n
        All done,

        - change network card settings back to dhcp and move the cable back to a lan port
        - try ssh connection to the gateways ip (usually 192.168.0.1) with username root and password root (change password immediately with passwd!)

        ssh root@192.168.0.1"""

      setTimeout ->
        process.exit 1
      , 20000

      res.writeHead 200
      res.end()
    .get '/{rbi}(.*?).rbi', (req, res) ->
      console.log '>>> RBI REQUEST'

      fp = path.join process.cwd(), req.params.rbi, '.rbi'

      if existsSync fp
        stats = statSync fp

        headers =
          'Content-Type': 'text/plain'
          'Content-Length': stats.size

        stream = createReadStream fp

        console.log '>>> RBI RESPONSE'
        console.dir [headers, fp]

        res.writeHead 200, headers
        stream.pipe res
      else
        res.writeHead 404

    .post '/', cwmp(url)

  srv = createServer route
  srv.keepAliveTimeout = 30000

  srv.on 'error', (e) ->
    if e.code in [ 'EADDRINUSE', 'EADDRNOTAVAIL' ]
      console.log e.code + ', retrying...'

      setTimeout ->
        srv.close()
        srv.listen port
      , 1000
    else console.error e

  srv.listen port
