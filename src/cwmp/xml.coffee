
exports.parse = (xml) ->

  declaration = ->
    m = match /^<\?xml\s*/

    return unless m

    node = {}

    while !(eos() or has('?>'))
      attr = attribute()

      if not attr
        return node

      node.attributes ?= {}
      node.attributes[attr.name] = attr.value

    match /\?>\s*/

    node

  tag = ->
    m = match /^<([\w-:.]+)\s*/

    return unless m

    node = {}

    while !(eos() or has('>') or has('?>') or has('/>'))
      attr = attribute()

      if !attr
        return [ m[1], node ]

      node.attributes ?= {}
      node.attributes[attr.name] = attr.value

    if match(/^\s*\/>\s*/)
      return [ m[1], node ]

    match /\??>\s*/

    c = content()

    if c
      node = c

    while child = tag()
      if child[1].Name and child[1].Value
        node[child[0]] ?= {}
        node[child[0]][child[1].Name] = child[1].Value
      else
        node[child[0]] = child[1]

    match /^<\/[\w-:.]+>\s*/

    [ m[1], node ]

  content = ->
    m = match(/^([^<]*)/)
    m?[1]

  attribute = ->
    m = match(/([\w:-]+)\s*=\s*("[^"]*"|'[^']*'|\w+)\s*/)

    return unless m

    name: m[1]
    value: m[2].replace /^['"]|['"]$/g, ''

  match = (re) ->
    m = xml.match(re)

    return unless m

    xml = xml.slice m[0].length

    m

  eos = ->
    not xml.length

  has = (prefix) ->
    0 == xml.indexOf(prefix)

  xml = xml.trim()
  xml = xml.replace(/<!--[\s\S]*?-->/g, '')

  [ name, obj ] = tag()

  "#{name}": obj

exports.methods =

  'cwmp:TransferCompleteResponse': (res) ->
    """<cwmp:TransferCompleteResponse/>"""

  'cwmp:Download': (res) ->
    """<cwmp:Download>
      <CommandKey>#{ res.commandKey or res.id }</CommandKey>
      <FileType>#{ res.fileType }</FileType>
      <URL>#{ res.url }</URL>
      <FileSize>#{ res.fileSize or 0 }</FileSize>
      <DelaySeconds>0</DelaySeconds>
    </cwmp:Download>"""

  'cwmp:InformResponse': (res) ->
    """<cwmp:InformResponse>
      <MaxEnvelopes>1</MaxEnvelopes>
    </cwmp:InformResponse>"""

exports.createSoapEnv = (env, id, body) ->
  """<?xml version="1.0" encoding="UTF-8"?>
  <soap-env:Envelope #{ env or '' }>
    <soap-env:Header>
      <cwmp:ID soap-env:mustUnderstand="1">#{ id }</cwmp:ID>
    </soap-env:Header>
    <soap-env:Body>
      #{ body }
    </soap-env:Body>
  </soap-env:Envelope>"""
