fs = require 'fs'

{ createServer } = require 'tftp'
{ Writable } = require 'stream'

args = require './args'

class StreamCounter extends Writable
  constructor: (@size, options) ->
    super options

    @bytes = 0

  _write: (chunk, encoding, cb) ->
    @bytes += chunk.length

    @emit 'progress',
      percent: @bytes / @size * 100 | 0
      loaded: @bytes
      total: @size

    cb()

    return

module.exports = (host, firmware, callback) ->

  server = createServer {
    port: 69
    denyPUT: true
  }, (req, res) ->
    console.log 'Received tftp request from', req.stats.remoteAddress, 'for file', req.file

    res.setSize firmwareFileSize

    firmwareStream = fs.createReadStream args.firmware

    console.log 'Sending firmware to router...'

    prog = new StreamCounter firmwareFileSize

    done = false

    prog.on 'progress', ({ percent }) ->
      p = Math.round(percent * 100) / 100

      if p % 10
        console.log 'Sent: ' + p + '%'

      if percent >= 100
        if done
          return

        console.log 'Firmware sent! Now just wait for the router to reboot'

        firmwareStream.close()

        done = true

      return

    firmwareStream
      .pipe prog
      .pipe res

    req.on 'error', (err) ->
      console.error 'ERROR:', err

  server.on 'error', (er) ->
    console.error 'ERROR:', err

  console.log 'Starting tftp server'

  server.listen()
