fs = require 'fs'
path = require 'path'

{ createServer } = require 'tftp'
{ Transform } = require 'stream'

dhcp = require './dhcp/server'
ips = require('./ips')()


class ProgressIndicator extends Transform
  constructor: (@size, options) ->
    super options

    @last = 0
    @bytes = 0

  _transform: (chunk, encoding, cb) ->
    @bytes += chunk.length

    percent = @bytes / @size * 100 | 0

    if (percent % 5) is 0 and percent isnt @last
      @last = percent

      @emit 'progress',
        percent: percent
        loaded: @bytes
        total: @size

    cb null, chunk

    return

module.exports = ({ eth, ip, tftp }) ->
  if ! fs.existsSync tftp
    console.error 'ERROR:', tftp, 'not found?'
    process.exit 1

  if eth == null || eth == undefined || eth == true
    network = ips.find ({ name }) -> name is eth

  if ip == null || ip == undefined || ip == true
    ip = if network == null || network == undefined then "192.168.0.254" else network.address

  addr = ip.split '.'
  addr.pop()
  addr = addr.join '.'

  dhcpd = dhcp
    .createServer
      range: [
        addr + '.10'
        addr + '.15'
      ]
      forceOptions: [ 'router', 'hostname', 'bootFile' ]
      randomIP: true
      netmask: '255.255.255.0'
      router: [ ip ]
      hostname: 'second.gateway'
      broadcast: addr + '.255'
      bootFile: (req, res) ->
        path.basename tftp
      server: ip
    .on 'listening', (sock, type) ->
      { address, port } = sock.address()

      console.log "Waiting for DHCP#{type} request... #{ address }:#{ port }"
    .on 'message', (data) ->
      console.log '### MESSAGE', JSON.stringify data
    .on 'bound', (state, ans) ->
      console.log '### BOUND', JSON.stringify state
    .on 'error', (err, data) ->
      return unless data

      console.log '!!! ERROR', err, data
    .listen 67

  server = createServer {
    host: '0.0.0.0'
    port: 69
    denyPUT: true
  }, (req, res) ->
    console.log 'Received tftp request from', req.stats.remoteAddress, 'for file', req.file
    stats = fs.statSync tftp
    res.setSize stats.size
    firmwareStream = fs.createReadStream tftp
    console.log 'Sending firmware to router...'
    prog = new ProgressIndicator stats.size

    done = false
    prog.on 'progress', ({ percent }) ->
      p = Math.round(percent * 100) / 100
      if p % 10 is 0
        console.log 'Sent: ' + p + '%'
      if percent >= 100
        if done
          return
        console.log 'Firmware sent! Now just wait for the router to reboot'
        firmwareStream.close()
        setTimeout ->
          process.exit 1
        , 20000

        done = true
      return

    firmwareStream
      .pipe prog
      .pipe res

    req.on 'error', (err) ->
      console.error 'ERROR:', err

  server.on 'error', (err) ->
    console.error 'ERROR:', err

  console.log 'Starting tftp server, listening on ' + ip + ':69'

  server.listen()

  [ dhcpd, server ]
