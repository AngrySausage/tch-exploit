assert = require('assert')

SEVENTY_YEARS = 2208988800

toMsecs = (buffer, offset) ->
  seconds = 0
  fraction = 0

  i = 0

  while i < 4
    seconds = seconds * 256 + buffer[offset + i]
    ++i

  i = 4

  while i < 8
    fraction = fraction * 256 + buffer[offset + i]
    ++i

  (seconds - SEVENTY_YEARS + fraction / 2 ** 32) * 1000

writeMsecs = (buffer, offset, ts) ->
  seconds = Math.floor(ts / 1000) + SEVENTY_YEARS
  fraction = Math.round(ts % 1000 / 1000 * 2 ** 32)

  buffer[offset + 0] = (seconds & 0xFF000000) >> 24
  buffer[offset + 1] = (seconds & 0x00FF0000) >> 16
  buffer[offset + 2] = (seconds & 0x0000FF00) >> 8
  buffer[offset + 3] = seconds & 0x000000FF

  buffer[offset + 4] = (fraction & 0xFF000000) >> 24
  buffer[offset + 5] = (fraction & 0x00FF0000) >> 16
  buffer[offset + 6] = (fraction & 0x0000FF00) >> 8
  buffer[offset + 7] = fraction & 0x000000FF

  buffer

class Packet

  @MODES:
    CLIENT: 3
    SERVER: 4

  constructor: ->
    Object.assign @,
      leapIndicator: 0
      version: 4
      mode: 3
      stratum: 0
      pollInterval: 6
      precision: 236
      referenceIdentifier: 0
      referenceTimestamp: 0
      originateTimestamp: 0
      receiveTimestamp: 0
      transmitTimestamp: 0

  @parse: (buffer) ->
    assert.equal buffer.length, 48, 'Invalid Package'

    packet = new Packet

    packet.leapIndicator = buffer[0] >> 6
    packet.version = (buffer[0] & 0x38) >> 3
    packet.mode = buffer[0] & 0x7
    packet.stratum = buffer[1]
    packet.pollInterval = buffer[2]
    packet.precision = buffer[3]
    packet.rootDelay = buffer.slice(4, 8)
    packet.rootDispersion = buffer.slice(8, 12)
    packet.referenceIdentifier = buffer.slice(12, 16)

    packet.referenceTimestamp = toMsecs(buffer, 16)
    packet.originateTimestamp = toMsecs(buffer, 24)
    packet.receiveTimestamp = toMsecs(buffer, 32)
    packet.transmitTimestamp = toMsecs(buffer, 40)

    packet

  toBuffer: ->
    buffer = Buffer.alloc(48).fill(0x00)
    buffer[0] = 0

    # 0b11100011; // LI, Version, Mode

    buffer[0] += @leapIndicator << 6
    buffer[0] += @version << 3
    buffer[0] += @mode << 0
    buffer[1] = @stratum
    buffer[2] = @pollInterval
    buffer[3] = @precision

    buffer.writeUInt32BE @rootDelay, 4
    buffer.writeUInt32BE @rootDispersion, 8
    buffer.writeUInt32BE @referenceIdentifier, 12

    writeMsecs buffer, 16, @referenceTimestamp
    writeMsecs buffer, 24, @originateTimestamp
    writeMsecs buffer, 32, @receiveTimestamp
    writeMsecs buffer, 40, @transmitTimestamp

    buffer

  toJSON: ->
    output = Object.assign {}, @

    output.version = @version

    output.leapIndicator = {
      0: 'no-warning'
      1: 'last-minute-61'
      2: 'last-minute-59'
      3: 'alarm'
    }[@leapIndicator]

    switch @mode
      when 1
        output.mode = 'symmetric-active'
      when 2
        output.mode = 'symmetric-passive'
      when 3
        output.mode = 'client'
      when 4
        output.mode = 'server'
      when 5
        output.mode = 'broadcast'
      when 0, 6, 7
        output.mode = 'reserved'

    if @stratum == 0
      output.stratum = 'death'
    else if @stratum == 1
      output.stratum = 'primary'
    else if @stratum <= 15
      output.stratum = 'secondary'
    else
      output.stratum = 'reserved'

    output.referenceTimestamp = new Date(@referenceTimestamp)
    output.originateTimestamp = new Date(@originateTimestamp)
    output.receiveTimestamp = new Date(@receiveTimestamp)
    output.transmitTimestamp = new Date(@transmitTimestamp)
    output.destinationTimestamp = new Date(@destinationTimestamp)

    output

module.exports = Packet
