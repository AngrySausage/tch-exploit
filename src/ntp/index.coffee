'use strict'

Packet = require './packet'

{ createSocket } = require 'dgram'
{ EventEmitter } = require 'events'

class NTP extends EventEmitter

  constructor: (options, callback) ->
    if typeof options is 'function'
      callback = options
      options = {}

    Object.assign @, {
      server: 'pool.ntp.org'
      port: 123
    }, options

    @socket = new createSocket 'udp4'

    if typeof callback is 'function'
      @time callback

  time: (callback) ->
    { server, port, timeout } = @

    packet = NTP.createPacket()

    @socket.send packet, 0, packet.length, port, server, (err) =>
      if err
        return callback err

      @socket.once 'message', (data) ->
        @socket.close()

        message = NTP.parse(data)

        callback err, message

    @

  @time: (options, callback) ->
    new NTP(options, callback)

  @createPacket: ->
    packet = new Packet
    packet.mode = Packet.MODES.CLIENT
    packet.originateTimestamp = Date.now()
    packet.toBuffer()

  @parse: (buffer) ->
    message = Packet.parse(buffer)
    message.destinationTimestamp = Date.now()
    message.time = new Date(message.transmitTimestamp)

    T1 = message.originateTimestamp
    T2 = message.receiveTimestamp
    T3 = message.transmitTimestamp
    T4 = message.destinationTimestamp

    message.d = T4 - T1 - (T3 - T2)
    message.t = (T2 - T1 + T3 - T4) / 2
    message

exports.Client = NTP

exports.Server = require './server'

exports.createServer = (options) ->
  new exports.Server options

module.exports = NTP
