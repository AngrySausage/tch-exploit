var Duplex, args, ask, createServer, cwmp, dhcpd, e, existsSync, file, networkInterfaces, pkg, readFileSync, readline, ref, route;

pkg = require('../package.json');

console.log("Technicolor OpenWRT Shell Unlocker v" + pkg.version + " By BoLaMN\n\n* Connect network cable from your computer to the WAN (red) port of the modem\n* Change your computers network card to be a static ip address\n\n  IPv4 Address: 58.162.0.1\n  Subnet Mask: 255.255.255.0\n  Default Gateway\\Router: 58.162.0.1\n");

Duplex = require('stream').Duplex;

createServer = require('http').createServer;

networkInterfaces = require('os').networkInterfaces;

ref = require('fs'), readFileSync = ref.readFileSync, existsSync = ref.existsSync;

dhcpd = require('./dhcp');

route = require('./router');

cwmp = require('./cwmp');

file = require('./file');

args = require('./args');

if (args.sts) {
  try {
    file.custom = readFileSync(args.sts);
  } catch (error) {
    e = error;
    throw e;
  }
}

readline = require('readline').createInterface({
  input: process.stdin,
  output: process.stdout
});

ask = function(cb) {
  var addr, addrInfo, cIp, i, ifaceDetails, ifaceName, ip, ips, len, name, ref1;
  cIp = null;
  ips = {};
  ref1 = networkInterfaces();
  for (ifaceName in ref1) {
    ifaceDetails = ref1[ifaceName];
    for (i = 0, len = ifaceDetails.length; i < len; i++) {
      addrInfo = ifaceDetails[i];
      if (!addrInfo.internal) {
        if (addrInfo.family === 'IPv4') {
          ips[ifaceName] = addrInfo.address;
          if (addrInfo.address === '58.162.0.1') {
            cIp = ifaceName;
          }
        }
      }
    }
  }
  addr = [];
  for (name in ips) {
    ip = ips[name];
    addr.push({
      name: name,
      ip: ip
    });
  }
  if (cIp) {
    return cb(addr.find(function(arg) {
      var name;
      name = arg.name;
      return name === cIp;
    }));
  }
  console.log('Could not find interface with ip: 58.162.0.1');
  console.table(addr);
  return readline.question("Select network interface: ", function(intr) {
    if (addr[intr] == null) {
      console.log('Unknown index: ' + intr);
      return ask(cb);
    }
    if (addr[intr].ip !== '58.162.0.1') {
      return ask(cb);
    }
    return cb(addr[intr]);
  });
};

ask(function(intr) {
  var ip, srv;
  ip = intr.ip.split('.');
  ip.pop();
  ip = ip.join('.');
  dhcpd.createServer({
    range: [ip + '.10', ip + '.15'],
    forceOptions: ['router', 'hostname', 'vendor'],
    randomIP: true,
    vendor: [1, 18, 104, 116, 116, 112, 58, 47, 47, 53, 56, 46, 49, 54, 50, 46, 48, 46, 49, 47, 2, 7, 84, 101, 108, 115, 116, 114, 97],
    netmask: '255.255.255.0',
    router: [ip + '.1'],
    hostname: 'second.gateway',
    broadcast: ip + '.255',
    server: ip + '.1'
  }).on('message', function(data) {
    return console.log('### MESSAGE', JSON.stringify(data));
  }).on('bound', function(state, ans) {
    return console.log('### BOUND', JSON.stringify(state));
  }).on('error', function(err, data) {
    if (!data) {
      return;
    }
    return console.log('!!! ERROR', err, data);
  }).listen(67);
  route.get('/file.sts', function(req, res) {
    var headers, stream;
    console.log('>>> STS REQUEST');
    file = file.custom || file.sts;
    headers = {
      'Content-Type': 'text/plain',
      'Content-Length': file.length
    };
    console.log('>>> STS RESPONSE');
    console.dir([headers, file.toString('utf8')]);
    res.writeHead(200, headers);
    stream = new Duplex();
    stream.push(file);
    stream.push(null);
    return stream.pipe(res);
  }).get('/done', function(req, res) {
    console.log('>>> WPS CALLBACK');
    console.log("\n\nAll done,\n\n- change network card settings back to dhcp and move the cable back to a lan port\n- try ssh connection to the gateways ip (usually 192.168.0.1) with username root and password root (change password immediately with passwd!)\n\nssh root@192.168.0.1");
    setTimeout(function() {
      return process.exit(1);
    }, 20000);
    res.writeHead(200);
    return res.end();
  }).get('/{rbi}(.*?).rbi', function(req, res) {
    var fp, headers, stats, stream;
    console.log('>>> RBI REQUEST');
    fp = path.join(process.cwd(), req.params.rbi, '.rbi');
    if (existsSync(fp)) {
      stats = statSync(fp);
      headers = {
        'Content-Type': 'text/plain',
        'Content-Length': stats.size
      };
      stream = createReadStream(fp);
      console.log('>>> RBI RESPONSE');
      console.dir([headers, fp]);
      res.writeHead(200, headers);
      return stream.pipe(res);
    } else {
      return res.writeHead(404);
    }
  }).post('/', cwmp(intr.ip));
  srv = createServer(route);
  srv.keepAliveTimeout = 30000;
  srv.listen(80, intr.ip);
  readline.close();
  return console.log('Waiting for DHCP request... ', intr.ip);
});
