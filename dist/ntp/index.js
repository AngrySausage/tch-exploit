'use strict';
var EventEmitter, NTP, Packet, createSocket,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Packet = require('./packet');

createSocket = require('dgram').createSocket;

EventEmitter = require('events').EventEmitter;

NTP = (function(superClass) {
  extend(NTP, superClass);

  function NTP(options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }
    Object.assign(this, {
      server: 'pool.ntp.org',
      port: 123
    }, options);
    this.socket = new createSocket('udp4');
    if (typeof callback === 'function') {
      this.time(callback);
    }
  }

  NTP.prototype.time = function(callback) {
    var packet, port, ref, server, timeout;
    ref = this, server = ref.server, port = ref.port, timeout = ref.timeout;
    packet = NTP.createPacket();
    this.socket.send(packet, 0, packet.length, port, server, (function(_this) {
      return function(err) {
        if (err) {
          return callback(err);
        }
        return _this.socket.once('message', function(data) {
          var message;
          this.socket.close();
          message = NTP.parse(data);
          return callback(err, message);
        });
      };
    })(this));
    return this;
  };

  NTP.time = function(options, callback) {
    return new NTP(options, callback);
  };

  NTP.createPacket = function() {
    var packet;
    packet = new Packet;
    packet.mode = Packet.MODES.CLIENT;
    packet.originateTimestamp = Date.now();
    return packet.toBuffer();
  };

  NTP.parse = function(buffer) {
    var T1, T2, T3, T4, message;
    message = Packet.parse(buffer);
    message.destinationTimestamp = Date.now();
    message.time = new Date(message.transmitTimestamp);
    T1 = message.originateTimestamp;
    T2 = message.receiveTimestamp;
    T3 = message.transmitTimestamp;
    T4 = message.destinationTimestamp;
    message.d = T4 - T1 - (T3 - T2);
    message.t = (T2 - T1 + T3 - T4) / 2;
    return message;
  };

  return NTP;

})(EventEmitter);

exports.Client = NTP;

exports.Server = require('./server');

exports.createServer = function(options) {
  return new exports.Server(options);
};

module.exports = NTP;
