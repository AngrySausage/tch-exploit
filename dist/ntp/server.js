'use strict';
var EventEmitter, NTPServer, Packet, udp,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

udp = require('dgram');

EventEmitter = require('events');

Packet = require('./packet');

NTPServer = (function(superClass) {
  extend(NTPServer, superClass);

  NTPServer.createServer = function(options) {
    return new NTPServer(options);
  };

  function NTPServer(options, onRequest) {
    NTPServer.__super__.constructor.call(this);
    if (typeof options === 'function') {
      onRequest = options;
      options = {};
    }
    Object.assign(this, {
      port: 123
    }, options);
    this.socket = udp.createSocket('udp4');
    this.socket.on('message', this.parse.bind(this));
    if (onRequest) {
      this.on('request', onRequest);
    }
    this;
  }

  NTPServer.prototype.listen = function(port, address) {
    this.socket.bind(port || this.port, address);
    return this;
  };

  NTPServer.prototype.address = function() {
    return this.socket.address();
  };

  NTPServer.prototype.send = function(rinfo, message, callback) {
    if (callback == null) {
      callback = function() {};
    }
    if (message instanceof Packet) {
      message.mode = Packet.MODES.SERVER;
      message = message.toBuffer();
    }
    console.log('response', message, 0, message.length, rinfo.port, rinfo.address);
    this.socket.send(message, 0, message.length, rinfo.port, rinfo.address);
    this.socket.send(message, rinfo.port, rinfo.server, callback);
    return this;
  };

  NTPServer.prototype.parse = function(message, rinfo) {
    var packet;
    packet = Packet.parse(message);
    this.send(rinfo, packet, function(err) {
      if (err) {
        return console.error(err);
      }
    });
    return this;
  };

  return NTPServer;

})(EventEmitter);

module.exports = NTPServer;
