var EventEmitter, TimeServer, dgram, server, util,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

EventEmitter = require('events').EventEmitter;

util = require('util');

dgram = require('dgram');

TimeServer = (function(superClass) {
  extend(TimeServer, superClass);

  function TimeServer(time, error, version, mode, stratum, delay, dispersion) {
    var createTime, ntp_peer_clock_precision, ntp_peer_clock_stratum, ntp_reference_id, ntp_root_delay, ntp_root_dispersion, ntp_seconds_since_epoch, ntp_server_error, ntp_server_mode, ntp_server_version;
    TimeServer.__super__.constructor.apply(this, arguments);
    this._socket = dgram.createSocket('udp4');
    ntp_server_error = ('0' + parseInt(error, 10).toString(2)).slice(-2);
    ntp_server_version = ('00' + parseInt(version, 10).toString(2)).slice(-3);
    ntp_server_mode = ('00' + parseInt(mode, 10).toString(2)).slice(-3);
    ntp_peer_clock_stratum = '1';
    ntp_peer_clock_precision = '128';
    ntp_root_delay = '0.9900';
    ntp_root_dispersion = '0.9900';
    ntp_seconds_since_epoch = '2208988800';
    ntp_reference_id = [78, 85, 76, 76];
    if (time === '') {
      createTime = 'recent';
    } else {
      createTime = (parseInt(new Date / 1000) - parseInt(time)).toString();
    }
    this._socket.on('message', (function(_this) {
      return function(msg, rinfo) {
        var timestamp;
        _this.emit('data', 'received message from ' + rinfo.address + ':' + rinfo.port);
        if (createTime === 'recent') {
          timestamp = (new Date / 1000).toString();
        } else {
          timestamp = (parseInt(new Date / 1000) - parseInt(createTime)).toString();
        }
        msg.writeUIntBE(parseInt(ntp_server_error + ntp_server_version + ntp_server_mode, 2), 0, 1);
        msg.writeUIntBE(parseInt(ntp_peer_clock_stratum, 10), 1, 1);
        msg.writeUIntBE(parseInt(ntp_peer_clock_precision, 10), 3, 1);
        msg.writeUIntBE(ntp_root_delay.before(), 4, 2);
        msg.writeUIntBE(65535 / 10000 * ntp_root_delay.after(), 6, 2);
        msg.writeUIntBE(parseInt(ntp_root_dispersion.before(), 10), 8, 2);
        msg.writeUIntBE(65535 / 10000 * ntp_root_dispersion.after(), 10, 2);
        msg.writeUIntBE(parseInt(ntp_reference_id[0], 10), 12, 1);
        msg.writeUIntBE(parseInt(ntp_reference_id[1], 10), 13, 1);
        msg.writeUIntBE(parseInt(ntp_reference_id[2], 10), 14, 1);
        msg.writeUIntBE(parseInt(ntp_reference_id[3], 10), 15, 1);
        msg.writeUIntBE(parseInt(ntp_seconds_since_epoch, 10) + timestamp.before(), 16, 4);
        msg.writeUIntBE(parseInt(ntp_seconds_since_epoch, 10) + timestamp.before(), 24, 4);
        msg.writeUIntBE(parseInt(ntp_seconds_since_epoch, 10) + timestamp.before(), 32, 4);
        msg.writeUIntBE(parseInt(ntp_seconds_since_epoch, 10) + timestamp.before(), 40, 4);
        return _this._socket.send(msg, 0, msg.length, rinfo.port, rinfo.address, function(err, bytes) {
          if (err) {
            throw err;
          }
          return _this.emit('data', 'send response to ' + rinfo.address + ':' + rinfo.port);
        });
      };
    })(this));
    this._socket.on('listening', (function(_this) {
      return function() {
        var address;
        address = _this._socket.address();
        return _this.emit('data', 'server listening ' + address.address + ':' + address.port);
      };
    })(this));
    this._socket.on('error', (function(_this) {
      return function(err) {
        return _this.emit('data', err);
      };
    })(this));
    this._socket.bind(123);
  }

  return TimeServer;

})(EventEmitter);

String.prototype.before = function() {
  var value;
  value = parseInt(this.toString().split('.')[0], 10);
  if (value) {
    return value;
  } else {
    return 0;
  }
};

String.prototype.after = function() {
  var value;
  value = parseInt(this.toString().split('.')[1], 10);
  if (value) {
    return value;
  } else {
    return 0;
  }
};

server = new TimeServer('1220580245', '0', '4', '4', '1', '0.9900', '0.9900');

server.on('data', function(output) {
  return console.log(output);
});

module.exports = TimeServer;
