var Packet, SEVENTY_YEARS, after, assert, before, toMsecs, writeMsecs;

assert = require('assert');

SEVENTY_YEARS = 2208988800;

toMsecs = function(buffer, offset) {
  var fraction, i, seconds;
  seconds = 0;
  fraction = 0;
  i = 0;
  while (i < 4) {
    seconds = seconds * 256 + buffer[offset + i];
    ++i;
  }
  i = 4;
  while (i < 8) {
    fraction = fraction * 256 + buffer[offset + i];
    ++i;
  }
  return (seconds - SEVENTY_YEARS + fraction / Math.pow(2, 32)) * 1000;
};

writeMsecs = function(buffer, offset, ts) {
  var fraction, seconds;
  seconds = Math.floor(ts / 1000) + SEVENTY_YEARS - SEVENTY_YEARS;
  fraction = Math.round(ts % 1000 / 1000 * Math.pow(2, 32));
  buffer[offset + 0] = (seconds & 0xFF000000) >> 24;
  buffer[offset + 1] = (seconds & 0x00FF0000) >> 16;
  buffer[offset + 2] = (seconds & 0x0000FF00) >> 8;
  buffer[offset + 3] = seconds & 0x000000FF;
  buffer[offset + 4] = (fraction & 0xFF000000) >> 24;
  buffer[offset + 5] = (fraction & 0x00FF0000) >> 16;
  buffer[offset + 6] = (fraction & 0x0000FF00) >> 8;
  buffer[offset + 7] = fraction & 0x000000FF;
  return buffer;
};

before = function(val) {
  var value;
  value = parseInt(val.toString().split('.')[0], 10);
  if (value) {
    return value;
  } else {
    return 0;
  }
};

after = function(val) {
  var value;
  value = parseInt(val.toString().split('.')[1], 10);
  if (value) {
    return value;
  } else {
    return 0;
  }
};

Packet = (function() {
  Packet.MODES = {
    CLIENT: 3,
    SERVER: 4
  };

  function Packet() {
    Object.assign(this, {
      leapIndicator: 0,
      version: 4,
      mode: 3,
      stratum: 0,
      pollInterval: 6,
      precision: 236,
      referenceIdentifier: 0,
      referenceTimestamp: 0,
      originateTimestamp: 0,
      receiveTimestamp: 0,
      transmitTimestamp: 0
    });
  }

  Packet.parse = function(buffer) {
    var packet;
    assert.equal(buffer.length, 48, 'Invalid Package');
    packet = new Packet;
    packet.leapIndicator = buffer[0] >> 6;
    packet.version = (buffer[0] & 0x38) >> 3;
    packet.mode = buffer[0] & 0x7;
    packet.stratum = buffer[1];
    packet.pollInterval = buffer[2];
    packet.precision = buffer[3];
    packet.rootDelay = buffer.slice(4, 8);
    packet.rootDispersion = buffer.slice(8, 12);
    packet.referenceIdentifier = buffer.slice(12, 16);
    packet.referenceTimestamp = toMsecs(buffer, 16);
    packet.originateTimestamp = toMsecs(buffer, 24);
    packet.receiveTimestamp = toMsecs(buffer, 32);
    packet.transmitTimestamp = toMsecs(buffer, 40);
    return packet;
  };

  Packet.prototype.toBuffer = function() {
    var buffer;
    buffer = Buffer.alloc(48).fill(0x00);
    buffer[0] = 0;
    buffer[0] += this.leapIndicator << 6;
    buffer[0] += this.version << 3;
    buffer[0] += this.mode << 0;
    buffer[1] = this.stratum;
    buffer[2] = this.pollInterval;
    buffer[3] = this.precision;
    buffer.writeUInt32BE(this.rootDelay, 4);
    buffer.writeUInt32BE(this.rootDispersion, 8);
    buffer.writeUInt32BE(this.referenceIdentifier, 12);
    writeMsecs(buffer, 16, this.referenceTimestamp);
    writeMsecs(buffer, 24, this.originateTimestamp);
    writeMsecs(buffer, 32, this.receiveTimestamp);
    writeMsecs(buffer, 40, this.transmitTimestamp);
    return buffer;
  };

  Packet.prototype.toJSON = function() {
    var output;
    output = Object.assign({}, this);
    output.version = this.version;
    output.leapIndicator = {
      0: 'no-warning',
      1: 'last-minute-61',
      2: 'last-minute-59',
      3: 'alarm'
    }[this.leapIndicator];
    switch (this.mode) {
      case 1:
        output.mode = 'symmetric-active';
        break;
      case 2:
        output.mode = 'symmetric-passive';
        break;
      case 3:
        output.mode = 'client';
        break;
      case 4:
        output.mode = 'server';
        break;
      case 5:
        output.mode = 'broadcast';
        break;
      case 0:
      case 6:
      case 7:
        output.mode = 'reserved';
    }
    if (this.stratum === 0) {
      output.stratum = 'death';
    } else if (this.stratum === 1) {
      output.stratum = 'primary';
    } else if (this.stratum <= 15) {
      output.stratum = 'secondary';
    } else {
      output.stratum = 'reserved';
    }
    output.referenceTimestamp = new Date(this.referenceTimestamp);
    output.originateTimestamp = new Date(this.originateTimestamp);
    output.receiveTimestamp = new Date(this.receiveTimestamp);
    output.transmitTimestamp = new Date(this.transmitTimestamp);
    output.destinationTimestamp = new Date(this.destinationTimestamp);
    return output;
  };

  return Packet;

})();

module.exports = Packet;
