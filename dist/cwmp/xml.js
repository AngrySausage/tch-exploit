exports.parse = function(xml) {
  var attribute, content, declaration, eos, has, match, name, obj, obj1, ref, tag;
  declaration = function() {
    var attr, m, node;
    m = match(/^<\?xml\s*/);
    if (!m) {
      return;
    }
    node = {};
    while (!(eos() || has('?>'))) {
      attr = attribute();
      if (!attr) {
        return node;
      }
      if (node.attributes == null) {
        node.attributes = {};
      }
      node.attributes[attr.name] = attr.value;
    }
    match(/\?>\s*/);
    return node;
  };
  tag = function() {
    var attr, c, child, m, name1, node;
    m = match(/^<([\w-:.]+)\s*/);
    if (!m) {
      return;
    }
    node = {};
    while (!(eos() || has('>') || has('?>') || has('/>'))) {
      attr = attribute();
      if (!attr) {
        return [m[1], node];
      }
      if (node.attributes == null) {
        node.attributes = {};
      }
      node.attributes[attr.name] = attr.value;
    }
    if (match(/^\s*\/>\s*/)) {
      return [m[1], node];
    }
    match(/\??>\s*/);
    c = content();
    if (c) {
      node = c;
    }
    while (child = tag()) {
      if (child[1].Name && child[1].Value) {
        if (node[name1 = child[0]] == null) {
          node[name1] = {};
        }
        node[child[0]][child[1].Name] = child[1].Value;
      } else {
        node[child[0]] = child[1];
      }
    }
    match(/^<\/[\w-:.]+>\s*/);
    return [m[1], node];
  };
  content = function() {
    var m;
    m = match(/^([^<]*)/);
    return m != null ? m[1] : void 0;
  };
  attribute = function() {
    var m;
    m = match(/([\w:-]+)\s*=\s*("[^"]*"|'[^']*'|\w+)\s*/);
    if (!m) {
      return;
    }
    return {
      name: m[1],
      value: m[2].replace(/^['"]|['"]$/g, '')
    };
  };
  match = function(re) {
    var m;
    m = xml.match(re);
    if (!m) {
      return;
    }
    xml = xml.slice(m[0].length);
    return m;
  };
  eos = function() {
    return !xml.length;
  };
  has = function(prefix) {
    return 0 === xml.indexOf(prefix);
  };
  xml = xml.trim();
  xml = xml.replace(/<!--[\s\S]*?-->/g, '');
  ref = tag(), name = ref[0], obj = ref[1];
  return (
    obj1 = {},
    obj1["" + name] = obj,
    obj1
  );
};

exports.methods = {
  'cwmp:TransferCompleteResponse': function(res) {
    return "<cwmp:TransferCompleteResponse/>";
  },
  'cwmp:Download': function(res) {
    return "<cwmp:Download>\n  <CommandKey>" + (res.commandKey || res.id) + "</CommandKey>\n  <FileType>" + res.fileType + "</FileType>\n  <URL>" + res.url + "</URL>\n  <FileSize>" + (res.fileSize || 0) + "</FileSize>\n  <DelaySeconds>0</DelaySeconds>\n</cwmp:Download>";
  },
  'cwmp:InformResponse': function(res) {
    return "<cwmp:InformResponse>\n  <MaxEnvelopes>1</MaxEnvelopes>\n</cwmp:InformResponse>";
  }
};

exports.createSoapEnv = function(env, id, body) {
  return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soap-env:Envelope " + (env || '') + ">\n  <soap-env:Header>\n    <cwmp:ID soap-env:mustUnderstand=\"1\">" + id + "</cwmp:ID>\n  </soap-env:Header>\n  <soap-env:Body>\n    " + body + "\n  </soap-env:Body>\n</soap-env:Envelope>";
};
