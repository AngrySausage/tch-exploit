'use strict';
var createSoapEnv, device, env, file, methods, parse, ref, request, response, set, stage;

ref = require('./xml'), parse = ref.parse, methods = ref.methods, createSoapEnv = ref.createSoapEnv;

file = require('../file');

stage = null;

device = {};

env = [];

set = function(obj, key, value) {
  var attr, attrs, i, j, len;
  attrs = key.split('.');
  for (i = j = 0, len = attrs.length; j < len; i = ++j) {
    attr = attrs[i];
    if (i === attrs.length - 1) {
      obj[attr] = value;
    } else {
      obj = obj[attr] != null ? obj[attr] : obj[attr] = {};
    }
  }
  return obj;
};

request = function(ip, req, res) {
  var body, cwmp, cwmpVersion, element, header, idElement, input, k, key, params, ref1, ref2, ref3, ref4, ref5, str, v, value, xml;
  if (req.body.length > 0) {
    console.log('>>> REQUEST');
    console.dir([req.headers, req.body]);
    xml = parse(req.body);
    element = xml['soapenv:Envelope'];
    body = element['soapenv:Body'];
    header = element['soapenv:Header'];
    ref1 = element.attributes;
    for (k in ref1) {
      v = ref1[k];
      if (!((k != null) && (v != null))) {
        return;
      }
      str = k.replace('soapenv', 'soap-env') + '=\'' + v + '\'';
      if (env.indexOf(str) === -1) {
        env.push(str);
      }
    }
    res.name = stage = Object.keys(body)[0];
    cwmp = (ref2 = element.attributes) != null ? ref2['xmlns:cwmp'] : void 0;
    ref3 = /urn:dslforum-org:cwmp-(\d+-\d+)/.exec(cwmp) || [cwmp, '1-2'], input = ref3[0], cwmpVersion = ref3[1];
    res.cwmpVersion = cwmpVersion.replace(/-/g, '.');
    idElement = header['cwmp:ID'];
    if (idElement) {
      res.id = req.id = idElement;
    }
    ref4 = body[stage];
    for (key in ref4) {
      value = ref4[key];
      res[key] = value;
    }
    if (((ref5 = res.ParameterList) != null ? ref5.ParameterValueStruct : void 0) != null) {
      params = res.ParameterList.ParameterValueStruct;
      res.params = Object.keys(params).reduce(function(obj, k) {
        if (typeof params[k] === 'string') {
          set(obj, k, params[k]);
        }
        return obj;
      }, {});
      device = res.params.Device || res.params.InternetGatewayDevice || {};
    }
    res.name += 'Response';
  } else if (stage === 'cwmp:Inform') {
    console.log('>>> EMPTY REQUEST');
    console.dir([req.headers, req.body]);
    file = file.custom || file.sts;
    res.name = 'cwmp:Download';
    res.fileType = '3 Vendor Configuration File';
    res.fileSize = file.length;
    res.url = "http://" + ip + "/file.sts";
  }
  res.env = env.join(' ');
  return response(req, res);
};

response = function(req, res) {
  var body, code, data, headers;
  headers = {
    'Content-Type': 'text/xml; charset="utf-8"',
    'Server': 'ACSServer',
    'SOAPServer': 'ACSServer'
  };
  if (res.name && (methods[res.name] != null)) {
    if (res.name === 'cwmp:InformResponse') {
      headers['Set-Cookie'] = "session=7b0fa33078153e5c";
    }
    if (res.id == null) {
      res.id = req.id != null ? req.id : req.id = '1690d26c77f0000';
    }
    if (methods[res.name] != null) {
      body = methods[res.name](res);
    }
    data = createSoapEnv(res.env, res.id, body);
    code = 200;
    headers['Content-Length'] = data.length;
    console.log('<<< RESPONSE');
    console.dir([headers, data]);
  } else {
    code = 204;
    data = null;
    headers['Connection'] = "close";
    headers['Content-Length'] = 0;
    console.log('<<< EMPTY RESPONSE');
    console.dir([headers, data]);
  }
  res.writeHead(code, headers);
  res.end(data);
  if (res.name === 'cwmp:TransferCompleteResponse') {
    console.log("All done,\n\n- press WPS button on your gateway\n- change network card settings back to dhcp and move the cable back to a lan port\n- try ssh connection to the gateways ip (usually 192.168.0.1) with username root and password root (change password immediately with passwd!)\n\nssh root@192.168.0.1");
    return setTimeout(function() {
      return process.exit(1);
    }, 30000);
  }
};

module.exports = function(ip) {
  return function(req, res) {
    var COOKIE_REGEX, match;
    COOKIE_REGEX = /\s*([a-zA-Z0-9\-_]+?)\s*=\s*"?([a-zA-Z0-9\-_]*?)"?\s*(,|;|$)/g;
    while (match = COOKIE_REGEX.exec(req.headers.cookie)) {
      if (match[1] === 'session') {
        req.id = res.id = match[2];
      }
    }
    req.body = '';
    req.on('data', function(chunk) {
      return req.body += chunk;
    });
    req.on('end', function() {
      return request(ip, req, res);
    });
  };
};
