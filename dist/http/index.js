var Duplex, args, createServer, cwmp, existsSync, file, path, readFileSync, ref, route, statSync;

Duplex = require('stream').Duplex;

createServer = require('http').createServer;

ref = require('fs'), readFileSync = ref.readFileSync, existsSync = ref.existsSync, statSync = ref.statSync;

path = require('path');

file = require('./file');

route = require('./router');

args = require('../args');

cwmp = require('./cwmp');

module.exports = function(ip, port, url) {
  var e, srv;
  if (args.file) {
    file.name = path.basename(args.file);
    try {
      file.data = readFileSync(args.file);
    } catch (error) {
      e = error;
      throw e;
    }
  }
  file.data = Buffer.from(file.data).toString('utf8').replace('{{url}}', url, 'utf8');
  file.ext = path.extname(file.name);
  route.get("/" + file.name, function(req, res) {
    var ext, headers, stream;
    ext = file.ext.toUpperCase();
    console.log(">>> " + ext + " REQUEST");
    headers = {
      'Content-Type': 'text/plain',
      'Content-Length': file.data.length
    };
    console.log('>>> #{ ext } RESPONSE');
    console.dir([headers, file.data.toString('utf8')]);
    res.writeHead(200, headers);
    stream = new Duplex();
    stream.push(file.data);
    stream.push(null);
    return stream.pipe(res);
  }).get('/done', function(req, res) {
    console.log('>>> WPS CALLBACK');
    console.log("\n\nAll done,\n\n- change network card settings back to dhcp and move the cable back to a lan port\n- try ssh connection to the gateways ip (usually 192.168.0.1) with username root and password root (change password immediately with passwd!)\n\nssh root@192.168.0.1");
    setTimeout(function() {
      return process.exit(1);
    }, 20000);
    res.writeHead(200);
    return res.end();
  }).post('/', cwmp(url));
  srv = createServer(route);
  srv.keepAliveTimeout = 30000;
  srv.on('error', function(e) {
    var ref1;
    if ((ref1 = e.code) === 'EADDRINUSE' || ref1 === 'EADDRNOTAVAIL') {
      console.log(e.code + ', retrying...');
      return setTimeout(function() {
        srv.close();
        return srv.listen(port);
      }, 1000);
    } else {
      return console.error(e);
    }
  });
  srv.listen(port);
  return srv;
};
