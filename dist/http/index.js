var Duplex, args, createServer, cwmp, existsSync, file, path, readFileSync, ref, route, statSync;

Duplex = require('stream').Duplex;

createServer = require('http').createServer;

ref = require('fs'), readFileSync = ref.readFileSync, existsSync = ref.existsSync, statSync = ref.statSync;

path = require('path');

file = require('./file');

route = require('./router');

args = require('../args');

cwmp = require('./cwmp');

module.exports = function(ip, port) {
  var e, srv;
  if (args.sts) {
    try {
      file.custom = readFileSync(args.sts);
    } catch (error) {
      e = error;
      throw e;
    }
  }
  route.get('/file.sts', function(req, res) {
    var f, headers, stream;
    console.log('>>> STS REQUEST');
    f = file.custom || file.sts;
    headers = {
      'Content-Type': 'text/plain',
      'Content-Length': f.length
    };
    console.log('>>> STS RESPONSE');
    console.dir([headers, f.toString('utf8')]);
    res.writeHead(200, headers);
    stream = new Duplex();
    stream.push(f);
    stream.push(null);
    return stream.pipe(res);
  }).get('/done', function(req, res) {
    console.log('>>> WPS CALLBACK');
    console.log("\n\nAll done,\n\n- change network card settings back to dhcp and move the cable back to a lan port\n- try ssh connection to the gateways ip (usually 192.168.0.1) with username root and password root (change password immediately with passwd!)\n\nssh root@192.168.0.1");
    setTimeout(function() {
      return process.exit(1);
    }, 20000);
    res.writeHead(200);
    return res.end();
  }).get('/{rbi}(.*?).rbi', function(req, res) {
    var fp, headers, stats, stream;
    console.log('>>> RBI REQUEST');
    fp = path.join(process.cwd(), req.params.rbi, '.rbi');
    if (existsSync(fp)) {
      stats = statSync(fp);
      headers = {
        'Content-Type': 'text/plain',
        'Content-Length': stats.size
      };
      stream = createReadStream(fp);
      console.log('>>> RBI RESPONSE');
      console.dir([headers, fp]);
      res.writeHead(200, headers);
      return stream.pipe(res);
    } else {
      return res.writeHead(404);
    }
  }).post('/', cwmp(ip + ':' + port));
  srv = createServer(route);
  srv.keepAliveTimeout = 30000;
  return srv.listen(port, ip);
};
